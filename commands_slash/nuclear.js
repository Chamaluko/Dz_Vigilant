const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

const devId = "1363226308439576777";

const declareModule = {
    name: 'nuclear',
    description: 'üö® COMANDO DESTRUCTIVO: Elimina TODOS los canales del servidor - USO EXTREMO',
    isEnabled: true,
    restriction: {
        roles: [], // No usar roles para este comando
        ids: [devId] // üîí SOLO ESTA ID ESPEC√çFICA PUEDE USAR ESTE COMANDO
    }
};



module.exports = {
    data: new SlashCommandBuilder()
        .setName(declareModule.name)
        .setDescription(declareModule.description)
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addStringOption(option =>
            option.setName('confirmacion')
                .setDescription('Escribe "ELIMINAR" para confirmar')
                .setRequired(true)
        ),

    declareModule: declareModule,
    executeNuclearDestruction: executeNuclearDestruction,

    async execute(interaction) {
        try {
            // üîí VERIFICACI√ìN ULTRA-RESTRICTIVA DE ID
            if (interaction.user.id !== devId) {
                await interaction.editReply({
                    content: 'üö´ **ACCESO DENEGADO**\n\nEste comando est√° restringido a una ID espec√≠fica.'
                });
                console.log(`üö® [NUCLEAR] Intento de acceso no autorizado por ${interaction.user.username} (${interaction.user.id})`);
                return;
            }

            // üîí VERIFICACI√ìN DE CONFIRMACI√ìN
            const confirmacion = interaction.options.getString('confirmacion');
            if (confirmacion !== 'ELIMINAR') {
                await interaction.editReply({
                    content: '‚ùå **Confirmaci√≥n incorrecta**\n\nDebes escribir exactamente: `ELIMINAR`'
                });
                return;
            }

            // üîí VERIFICACI√ìN FINAL CON BOTONES
            const warningEmbed = new EmbedBuilder()
                .setTitle('üö® ADVERTENCIA FINAL')
                .setDescription('**EST√ÅS A PUNTO DE ELIMINAR TODOS LOS CANALES DEL SERVIDOR**\n\n' +
                    '‚ö†Ô∏è **ESTA ACCI√ìN ES IRREVERSIBLE**\n' +
                    '‚ö†Ô∏è **SE PERDER√ÅN TODOS LOS MENSAJES**\n' +
                    '‚ö†Ô∏è **SE PERDER√ÅN TODAS LAS CONFIGURACIONES**\n\n' +
                    `üèõÔ∏è **Servidor:** ${interaction.guild.name}\n` +
                    `üìä **Canales totales:** ${interaction.guild.channels.cache.size}\n` +
                    `üë§ **Ejecutado por:** ${interaction.user.username}\n\n` +
                    '**¬øEst√°s completamente seguro?**')
                .setColor(0xFF0000)
                .setTimestamp();

            const confirmButtons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('nuclear_confirm')
                        .setLabel('üí• S√ç, ELIMINAR TODO')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('nuclear_cancel')
                        .setLabel('‚ùå CANCELAR')
                        .setStyle(ButtonStyle.Secondary)
                );

            await interaction.editReply({
                embeds: [warningEmbed],
                components: [confirmButtons]
            });

            // Esperar confirmaci√≥n final
            const filter = i => i.user.id === interaction.user.id;
            try {
                const response = await interaction.channel.awaitMessageComponent({ 
                    filter, 
                    time: 30000 // 30 segundos para decidir
                });

                if (response.customId === 'nuclear_cancel') {
                    await response.update({
                        content: '‚úÖ **Operaci√≥n cancelada**\n\nNo se elimin√≥ ning√∫n canal.',
                        embeds: [],
                        components: []
                    });
                    return;
                }

                if (response.customId === 'nuclear_confirm') {
                    await response.update({
                        content: 'üí• **INICIANDO DESTRUCCI√ìN NUCLEAR...**\n\n‚è≥ Eliminando todos los canales...',
                        embeds: [],
                        components: []
                    });

                    // üí• EJECUTAR DESTRUCCI√ìN TOTAL
                    await executeNuclearDestruction(interaction);
                }

            } catch (error) {
                await interaction.editReply({
                    content: '‚è∞ **Tiempo agotado**\n\nOperaci√≥n cancelada por seguridad.',
                    embeds: [],
                    components: []
                });
            }

        } catch (error) {
            console.error('‚ùå [NUCLEAR] Error en comando nuclear:', error);
            try {
                await interaction.editReply({
                    content: '‚ùå Error cr√≠tico durante la operaci√≥n nuclear.'
                });
            } catch (editError) {
                console.error('‚ùå [NUCLEAR] Error adicional al enviar mensaje de error:', editError);
            }
        }
    }
};

async function executeNuclearDestruction(interaction) {
    try {
        console.log(`üí• [NUCLEAR] INICIANDO DESTRUCCI√ìN TOTAL en ${interaction.guild.name} por ${interaction.user.username}`);
        
        const guild = interaction.guild;
        const channels = [...guild.channels.cache.values()];
        const totalChannels = channels.length;
        let deletedCount = 0;
        let errorCount = 0;

        // Crear un canal temporal para reportar el progreso
        let reportChannel = null;
        try {
            reportChannel = await guild.channels.create({
                name: 'üö®nuclear-report',
                reason: 'Canal temporal para reportar destrucci√≥n nuclear'
            });
        } catch (error) {
            console.log('No se pudo crear canal de reporte');
        }

        // Funci√≥n para reportar progreso
        async function reportProgress(message) {
            console.log(`üí• [NUCLEAR] ${message}`);
            if (reportChannel) {
                try {
                    await reportChannel.send(`üí• **NUCLEAR:** ${message}`);
                } catch (error) {
                    // Ignore si no se puede enviar
                }
            }
        }

        await reportProgress(`Iniciando eliminaci√≥n de ${totalChannels} canales...`);

        // Eliminar canales en lotes para evitar rate limits
        for (const channel of channels) {
            // No eliminar el canal de reporte hasta el final
            if (channel.id === reportChannel?.id) continue;

            try {
                await channel.delete('üí• COMANDO NUCLEAR - Destrucci√≥n total');
                deletedCount++;
                
                if (deletedCount % 10 === 0) {
                    await reportProgress(`Progreso: ${deletedCount}/${totalChannels} canales eliminados`);
                }
                
                // Esperar un poco entre eliminaciones para evitar rate limits
                await new Promise(resolve => setTimeout(resolve, 100));
                
            } catch (error) {
                errorCount++;
                console.error(`‚ùå [NUCLEAR] Error eliminando canal ${channel.name}:`, error);
            }
        }

        // Reporte final
        const finalReport = `üèÅ **DESTRUCCI√ìN COMPLETADA**\n\n` +
            `‚úÖ **Canales eliminados:** ${deletedCount}\n` +
            `‚ùå **Errores:** ${errorCount}\n` +
            `üìä **Total original:** ${totalChannels}\n\n` +
            `üë§ **Ejecutado por:** ${interaction.user.username}\n` +
            `üïê **Hora:** ${new Date().toLocaleString('es-ES')}\n\n` +
            `**Este canal se auto-eliminar√° en 10 segundos...**`;

        await reportProgress(finalReport);

        // Auto-eliminar el canal de reporte despu√©s de 30 segundos
        setTimeout(async () => {
            try {
                if (reportChannel) {
                    await reportChannel.delete('üí• NUCLEAR - Auto-eliminaci√≥n de reporte');
                }
            } catch (error) {
                console.error('Error eliminando canal de reporte:', error);
            }
        }, 10000);

        console.log(`üí• [NUCLEAR] DESTRUCCI√ìN COMPLETADA: ${deletedCount}/${totalChannels} canales eliminados`);

    } catch (error) {
        console.error('‚ùå [NUCLEAR] Error cr√≠tico durante la destrucci√≥n:', error);
    }
} 